Introduction:
  - Nest is a framework for building efficient, scalable Node.js server-side applications. 
  - Under the hood, Nest makes use of Express, but also provides compatibility with wide range of other libraries

Folder Structure
  - main.ts : The entry file of the application which uses NestFactory to create a Nest application instance
  - app.module.ts : The root module of the application
  - app.controller.ts : Basic controller sample with a single route
  - The main.ts includes an async function, which will bootstrap our application,
    - To create a Nest application instance, we are using the NestFactory.
    - NestFactory is one of the most fundamental classes, it exposes a few static methods that allows creating application instance.
    - The create() method returns an object, which fullfills the INestApplication interface, and provides a set of usable methods

Platform
  - Nest aims to be a platform-agnostic framework. 
  - Technically nest is able to work with any HTTP library as soon as an adapter is created. And there are two HTTP platforms supported
    out-of-the-box so far, express and fastify
    - platform-express : Express is a well-known minimalist web framework for node. It is battle tested, production-ready library with lots of
        resources implemented by the community. The @nestjs/platform-express package is being used by default
    - platform-fastify : Fastify is a fast and low overhead highly focused on providing the best efficiency and speed
  - In addition, every platform exposes a dedicated application interface, respectively NestExpressApplication and NestFastifyApplication

Controllers
  - Controllers are responsible for handling the requests and returning responses to the client.
  - A controllers purpose is to receive specific requests for the application. The routing mechanisam controls which controller receives which
    requests.
  - Each controller can have different routes and each route can perform different action
  - In order to create a basic controller, we use classes and decorators. Decorators associate classes with required metadata and enable nest to
    create a routing map

Providers
  - Basically, almost anything can be considered as a provider - service, repository, factory, helper and so on. 
  - All of them can inject dependencies meaning they can create various relationships with each other.
  - But in fact, a provider is nothing else than just a simple class annotated with and @injectable() decorator

Modules
  - A module is a class annotated with a @Module() decorator. The @Module() decorator provides metadata that nest makes use of to organize the
    application structure.
  - Each application has at least one module, a root module. The root module is the place where nest is starting to arrange the application graph.
  - Based on the application size there will be many modules each with a closely related set of capabilities.
  - The @Module decorator takes a single object whose properties describe the module
    - providers: the providers that will be instantiated by the nest injector and may be shared at least across this module
    - controllers: the set of controllers which have to be created
    - imports: the list of imported modules that export the providers which are required in this module
    - exports: the subset of providers that are provided by this module and should be available in the other modules
  - The module encapsulates providers by default. It means that its impossible to inject providers that are neither directly part of the current module
    nor they're exported from the imported modules.

  - Features modules
    - The controller and service belonging to the same application domain can be moved to the common module eg., CatsController and CatsService to a CatsModule
  - Shared modules
    - In nest, modules are singletons by default, and thus you can share the same instance of any provider between 2..* modules effortlessly.
    - Every module is a shared module in fact. Once created it can be reused by any module.
    - Eg., If we want to share the CatsService between few other modules we need to put the CatsService into exports. Now each module which would import the CatsModule has an access to the CatsService and will share the same instance with all of the modules that import this module as well.
  - Dependency Injection
    - A module class can inject providers as well(Eg., for configuration purpose). However the module classes cannot be injected by the providers due to 
      the circular dependency
  - Global modules
    - If you have to import the same set of modules, it might be annoying. 
      - In Angular, the providers are registered in the global scope. Once defined they're available everywhere.
    - Nest encapsulates providers inside the module scope. You aren't able to use the module providers elsewhere without importing them.
    - But sometimes, you may just want to provide a set of things which should be available always Eg., helpers, database connection
    - @Global() decorator makes the module global-scoped. Eg., Afterward the CatsService will be ubiquitous although CatsModule won't be imported
  - Dynamic modules
    - The nest module system comes with a feature called dynamic modules. It enables you to create customizable modules without any effort.

Middleware
  - The middleware is a function which is called before the route handler. Middleware functions have access to the request and response objects, and the next middleware function in the applications request-response cycle.
  - The next middleware function is commonly denoted by a variable named next
  - Middleware functions can perform.,
    - execute any code 
    - make changes to the request and the response objects.
    - end the request response cycle
    - call the next middleware function in the stack
    - if the current middleware function does not end the request-response cycle, it must call the next() to pass control to the next middleware function. Otherwise the request will be left hanging
  - The nest middleware is either a function, or a class with an @Injectable() decorator. The class should implement the NestMiddleware interface, while the function does not have any special requirements


                                              Pipe
  Client-side ============================================> Route Handler
                  filter


Exception Filters
  - The built-in exception layer is responsible for handling all thrown exceptions across your whole application. When an unhandled exception is caught,
    The end user will recieve an appropriate error response
  - Each occurred exception is handled by the global exception filter, and when its unrecoganized(is neither HttpException nor a class that inherits from  HttpException), a user recieve the 500 internal server error
  - The basic exception handle is fine but sometimes we need have full control over the exception hence we use exception filter to customize our exception
Pipes
  - A pipe is a class annotated with the @Injectable() decorator. The pipe should implement the PipeTransform interface.
  - A pipe transforms the input data to the desired output. Also it could take care of the validations, since its possible to throw an exception when the data is incorrect
  - The pipe runs inside the exception zone. This means when exceptions are thrown they are handled by the core exception handler and exception filter that
  are applied to the current context.
  - Nest comes with two pipes available right out of the box,
    - ValidationPipe
    - ParseIntPipe
Guards
  - A guard is a class annotated with the @Injectable decorator. Guards should implement the CanActivate interface
  - Guards have a single responsibility. They determine whether a request shall be handled by the route handler or not.
  - Guards are executed after each middleware, but before any interceptor and pipe.
  - Authentication : Confirming your own identity(Process of verifying who you are)
  - Authorization : Granting access(Process of verifying what you have access to)
Interceptors
  - An interceptor is a class annotated with the @Injectable() decorator. Interceptors should implement the NestInterceptor interface.
  - Interceptors have a set of usefull capabilities which are inspired by the Aspect-Oriented Programming (AOP) technique.
    - bind extra logic before/after method execution.
    - transform the result returned from a function
    - transform the exception thrown from a function
    - completely override a function depending on the choosen conditions (e.g. caching purpose)
  - Each interceptor has the intercept method that take 2 arguments as follows
    - Execution context
      - The execution context offers a little bit more. It extends ArgumentsHost, but also provides more details about current execution process
      - The getHandler() returns a reference to the currently processed handler while getClass() return a type of the controller class which this 
        particular handler belongs to.
      - Other words, If the user points to create() method that is defined and registered within CatsController, the getHandler() will return a reference 
        to the create() method and getClass() in this case, will simply return a CatsController type(not instance)
    - CallHandler
      - If we don't manually call handle() method, the main handler won't be evaluated at all.
      - Basically the CallHandler is an object which wraps the execution stream, and thus defers the final handler execution
      - Example., Lets say we make a POST request which points to the create() handler(method). If an interceptor which does not call the handle() method is called along the way, the create() method won't be evaluated. Only when handle() is called(and its value has been returned), the final method would be triggered. why?
        - Because Nest subscribes to the returned stream and uses values that this stream produces to create either a single response or multiple responses
          from the end-user.
        - Moreover, handle() returns an observable meaning, it supplies us with a very powerfull operators that helps with, response manipulation
  - Acpect Interception
    - The first use case is to add extra logic either before or after the function execution. Its usefull when we're gonna log intraction with the application.

################## Techniques ######################
Authentication:
  - Authentication is an essential part of the most existing applications. There are diffrent approaches, strategies and ways to handle user authorization
  - Passport is one of the most popular authentication library.
      - passport-http-bearer(npm install --save @nestjs/passport passport passport-http-bearer)
      - passport-jwt

  - Bearer strategy
    - Bearer token are typically used to protect API endpoints and are often issued using OAuth 2.0. Bearer authentication stratergy authenticates users using a bearer token.
TypeORM:
  - In order to reduce the boilerplate necessary to start the database nest comes with the typeorm package.



















